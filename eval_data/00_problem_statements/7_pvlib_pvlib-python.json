{
    "repo": "pvlib/pvlib-python",
    "instance_id": "pvlib__pvlib-python-1707",
    "base_commit": "40e9e978c170bdde4eeee1547729417665dbc34c",
    "patch": "diff --git a/pvlib/iam.py b/pvlib/iam.py\n--- a/pvlib/iam.py\n+++ b/pvlib/iam.py\n@@ -175,8 +175,12 @@ def physical(aoi, n=1.526, K=4.0, L=0.002, *, n_ar=None):\n     n2costheta2 = n2 * costheta\n \n     # reflectance of s-, p-polarized, and normal light by the first interface\n-    rho12_s = ((n1costheta1 - n2costheta2) / (n1costheta1 + n2costheta2)) ** 2\n-    rho12_p = ((n1costheta2 - n2costheta1) / (n1costheta2 + n2costheta1)) ** 2\n+    with np.errstate(divide='ignore', invalid='ignore'):\n+        rho12_s = \\\n+            ((n1costheta1 - n2costheta2) / (n1costheta1 + n2costheta2)) ** 2\n+        rho12_p = \\\n+            ((n1costheta2 - n2costheta1) / (n1costheta2 + n2costheta1)) ** 2\n+\n     rho12_0 = ((n1 - n2) / (n1 + n2)) ** 2\n \n     # transmittance through the first interface\n@@ -208,13 +212,22 @@ def physical(aoi, n=1.526, K=4.0, L=0.002, *, n_ar=None):\n         tau_0 *= (1 - rho23_0) / (1 - rho23_0 * rho12_0)\n \n     # transmittance after absorption in the glass\n-    tau_s *= np.exp(-K * L / costheta)\n-    tau_p *= np.exp(-K * L / costheta)\n+    with np.errstate(divide='ignore', invalid='ignore'):\n+        tau_s *= np.exp(-K * L / costheta)\n+        tau_p *= np.exp(-K * L / costheta)\n+\n     tau_0 *= np.exp(-K * L)\n \n     # incidence angle modifier\n     iam = (tau_s + tau_p) / 2 / tau_0\n \n+    # for light coming from behind the plane, none can enter the module\n+    # when n2 > 1, this is already the case\n+    if np.isclose(n2, 1).any():\n+        iam = np.where(aoi >= 90, 0, iam)\n+        if isinstance(aoi, pd.Series):\n+            iam = pd.Series(iam, index=aoi.index)\n+\n     return iam\n \n \n",
    "test_patch": "diff --git a/pvlib/tests/test_iam.py b/pvlib/tests/test_iam.py\n--- a/pvlib/tests/test_iam.py\n+++ b/pvlib/tests/test_iam.py\n@@ -51,6 +51,18 @@ def test_physical():\n     assert_series_equal(iam, expected)\n \n \n+def test_physical_n1_L0():\n+    aoi = np.array([0, 22.5, 45, 67.5, 90, 100, np.nan])\n+    expected = np.array([1, 1, 1, 1, 0, 0, np.nan])\n+    iam = _iam.physical(aoi, n=1, L=0)\n+    assert_allclose(iam, expected, equal_nan=True)\n+\n+    aoi = pd.Series(aoi)\n+    expected = pd.Series(expected)\n+    iam = _iam.physical(aoi, n=1, L=0)\n+    assert_series_equal(iam, expected)\n+\n+\n def test_physical_ar():\n     aoi = np.array([0, 22.5, 45, 67.5, 90, 100, np.nan])\n     expected = np.array([1, 0.99944171, 0.9917463, 0.91506158, 0, 0, np.nan])\n",
    "problem_statement": "regression: iam.physical returns nan for aoi > 90\u00b0 when n = 1\n**Describe the bug**\r\nFor pvlib==0.9.5, when n = 1 (no reflection) and aoi > 90\u00b0, we get nan as result.\r\n\r\n**To Reproduce**\r\n```python\r\nimport pvlib\r\npvlib.iam.physical(aoi=100, n=1)\r\n```\r\nreturns `nan`.\r\n\r\n**Expected behavior**\r\nThe result should be `0`, as it was for pvlib <= 0.9.4.\r\n\r\n\r\n**Versions:**\r\n - ``pvlib.__version__``: '0.9.5'\r\n - ``pandas.__version__``:  '1.5.3'\r\n - python: 3.10.4\r\n\n",
    "hints_text": "",
    "created_at": "2023-03-24T10:46:42Z",
    "version": "0.9",
    "FAIL_TO_PASS": "[\"pvlib/tests/test_iam.py::test_physical_n1_L0\"]",
    "PASS_TO_PASS": "[\"pvlib/tests/test_iam.py::test_ashrae\", \"pvlib/tests/test_iam.py::test_ashrae_scalar\", \"pvlib/tests/test_iam.py::test_physical\", \"pvlib/tests/test_iam.py::test_physical_ar\", \"pvlib/tests/test_iam.py::test_physical_noar\", \"pvlib/tests/test_iam.py::test_physical_scalar\", \"pvlib/tests/test_iam.py::test_martin_ruiz\", \"pvlib/tests/test_iam.py::test_martin_ruiz_exception\", \"pvlib/tests/test_iam.py::test_martin_ruiz_diffuse\", \"pvlib/tests/test_iam.py::test_iam_interp\", \"pvlib/tests/test_iam.py::test_sapm[45-0.9975036250000002]\", \"pvlib/tests/test_iam.py::test_sapm[aoi1-expected1]\", \"pvlib/tests/test_iam.py::test_sapm[aoi2-expected2]\", \"pvlib/tests/test_iam.py::test_sapm_limits\", \"pvlib/tests/test_iam.py::test_marion_diffuse_model\", \"pvlib/tests/test_iam.py::test_marion_diffuse_kwargs\", \"pvlib/tests/test_iam.py::test_marion_diffuse_invalid\", \"pvlib/tests/test_iam.py::test_marion_integrate_scalar[sky-180-0.9596085829811408]\", \"pvlib/tests/test_iam.py::test_marion_integrate_scalar[horizon-1800-0.8329070417832541]\", \"pvlib/tests/test_iam.py::test_marion_integrate_scalar[ground-180-0.719823559106309]\", \"pvlib/tests/test_iam.py::test_marion_integrate_list[sky-180-expected0]\", \"pvlib/tests/test_iam.py::test_marion_integrate_list[horizon-1800-expected1]\", \"pvlib/tests/test_iam.py::test_marion_integrate_list[ground-180-expected2]\", \"pvlib/tests/test_iam.py::test_marion_integrate_series[sky-180-expected0]\", \"pvlib/tests/test_iam.py::test_marion_integrate_series[horizon-1800-expected1]\", \"pvlib/tests/test_iam.py::test_marion_integrate_series[ground-180-expected2]\", \"pvlib/tests/test_iam.py::test_marion_integrate_ground_flat\", \"pvlib/tests/test_iam.py::test_marion_integrate_invalid\", \"pvlib/tests/test_iam.py::test_schlick\", \"pvlib/tests/test_iam.py::test_schlick_diffuse\"]",
    "environment_setup_commit": "6072e0982c3c0236f532ddfa48fbf461180d834e"
}
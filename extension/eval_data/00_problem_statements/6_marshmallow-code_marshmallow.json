{
    "repo": "marshmallow-code/marshmallow",
    "instance_id": "marshmallow-code__marshmallow-1343",
    "base_commit": "2be2d83a1a9a6d3d9b85804f3ab545cecc409bb0",
    "patch": "diff --git a/src/marshmallow/schema.py b/src/marshmallow/schema.py\n--- a/src/marshmallow/schema.py\n+++ b/src/marshmallow/schema.py\n@@ -877,7 +877,7 @@ def _invoke_field_validators(self, unmarshal, data, many):\n                 for idx, item in enumerate(data):\n                     try:\n                         value = item[field_obj.attribute or field_name]\n-                    except KeyError:\n+                    except (KeyError, TypeError):\n                         pass\n                     else:\n                         validated_value = unmarshal.call_and_store(\n@@ -892,7 +892,7 @@ def _invoke_field_validators(self, unmarshal, data, many):\n             else:\n                 try:\n                     value = data[field_obj.attribute or field_name]\n-                except KeyError:\n+                except (KeyError, TypeError):\n                     pass\n                 else:\n                     validated_value = unmarshal.call_and_store(\n",
    "test_patch": "diff --git a/tests/test_marshalling.py b/tests/test_marshalling.py\n--- a/tests/test_marshalling.py\n+++ b/tests/test_marshalling.py\n@@ -2,7 +2,7 @@\n \n import pytest\n \n-from marshmallow import fields, Schema\n+from marshmallow import fields, Schema, validates\n from marshmallow.marshalling import Marshaller, Unmarshaller, missing\n from marshmallow.exceptions import ValidationError\n \n@@ -283,3 +283,24 @@ class TestSchema(Schema):\n \n             assert result is None\n             assert excinfo.value.messages == {'foo': {'_schema': ['Invalid input type.']}}\n+\n+    # Regression test for https://github.com/marshmallow-code/marshmallow/issues/1342\n+    def test_deserialize_wrong_nested_type_with_validates_method(self, unmarshal):\n+        class TestSchema(Schema):\n+            value = fields.String()\n+\n+            @validates('value')\n+            def validate_value(self, value):\n+                pass\n+\n+        data = {\n+            'foo': 'not what we need'\n+        }\n+        fields_dict = {\n+            'foo': fields.Nested(TestSchema, required=True)\n+        }\n+        with pytest.raises(ValidationError) as excinfo:\n+            result = unmarshal.deserialize(data, fields_dict)\n+\n+            assert result is None\n+            assert excinfo.value.messages == {'foo': {'_schema': ['Invalid input type.']}}\n",
    "problem_statement": "[version 2.20.0] TypeError: 'NoneType' object is not subscriptable\nAfter update from version 2.19.5 to 2.20.0 I got error for code like:\r\n\r\n```python\r\nfrom marshmallow import Schema, fields, validates\r\n\r\n\r\nclass Bar(Schema):\r\n    value = fields.String()\r\n\r\n    @validates('value')  # <- issue here\r\n    def validate_value(self, value):\r\n        pass\r\n\r\n\r\nclass Foo(Schema):\r\n    bar = fields.Nested(Bar)\r\n\r\n\r\nsch = Foo()\r\n\r\nsch.validate({\r\n    'bar': 'invalid',\r\n})\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/_/bug_mschema.py\", line 19, in <module>\r\n    'bar': 'invalid',\r\n  File \"/_/env/lib/python3.7/site-packages/marshmallow/schema.py\", line 628, in validate\r\n    _, errors = self._do_load(data, many, partial=partial, postprocess=False)\r\n  File \"/_/env/lib/python3.7/site-packages/marshmallow/schema.py\", line 670, in _do_load\r\n    index_errors=self.opts.index_errors,\r\n  File \"/_/env/lib/python3.7/site-packages/marshmallow/marshalling.py\", line 292, in deserialize\r\n    index=(index if index_errors else None)\r\n  File \"/_/env/lib/python3.7/site-packages/marshmallow/marshalling.py\", line 65, in call_and_store\r\n    value = getter_func(data)\r\n  File \"/_/env/lib/python3.7/site-packages/marshmallow/marshalling.py\", line 285, in <lambda>\r\n    data\r\n  File \"/_/env/lib/python3.7/site-packages/marshmallow/fields.py\", line 265, in deserialize\r\n    output = self._deserialize(value, attr, data)\r\n  File \"/_/env/lib/python3.7/site-packages/marshmallow/fields.py\", line 465, in _deserialize\r\n    data, errors = self.schema.load(value)\r\n  File \"/_/env/lib/python3.7/site-packages/marshmallow/schema.py\", line 588, in load\r\n    result, errors = self._do_load(data, many, partial=partial, postprocess=True)\r\n  File \"/_/env/lib/python3.7/site-packages/marshmallow/schema.py\", line 674, in _do_load\r\n    self._invoke_field_validators(unmarshal, data=result, many=many)\r\n  File \"/_/env/lib/python3.7/site-packages/marshmallow/schema.py\", line 894, in _invoke_field_validators\r\n    value = data[field_obj.attribute or field_name]\r\nTypeError: 'NoneType' object is not subscriptable\r\n```\n",
    "hints_text": "Thanks for reporting. I was able to reproduce this on 2.20.0. This is likely a regression from https://github.com/marshmallow-code/marshmallow/pull/1323 . I don't have time to look into it now. Would appreciate a PR.",
    "created_at": "2019-08-13T04:36:01Z",
    "version": "2.20",
    "FAIL_TO_PASS": "[\"tests/test_marshalling.py::TestUnmarshaller::test_deserialize_wrong_nested_type_with_validates_method\"]",
    "PASS_TO_PASS": "[\"tests/test_marshalling.py::test_missing_is_falsy\", \"tests/test_marshalling.py::TestMarshaller::test_prefix\", \"tests/test_marshalling.py::TestMarshaller::test_marshalling_generator\", \"tests/test_marshalling.py::TestMarshaller::test_default_to_missing\", \"tests/test_marshalling.py::TestMarshaller::test_serialize_fields_with_load_only_param\", \"tests/test_marshalling.py::TestMarshaller::test_missing_data_are_skipped\", \"tests/test_marshalling.py::TestMarshaller::test_serialize_with_load_only_doesnt_validate\", \"tests/test_marshalling.py::TestMarshaller::test_serialize_fields_with_dump_to_param\", \"tests/test_marshalling.py::TestMarshaller::test_serialize_fields_with_dump_to_and_prefix_params\", \"tests/test_marshalling.py::TestMarshaller::test_stores_indices_of_errors_when_many_equals_true\", \"tests/test_marshalling.py::TestMarshaller::test_doesnt_store_errors_when_index_errors_equals_false\", \"tests/test_marshalling.py::TestUnmarshaller::test_extra_data_is_ignored\", \"tests/test_marshalling.py::TestUnmarshaller::test_stores_errors\", \"tests/test_marshalling.py::TestUnmarshaller::test_stores_indices_of_errors_when_many_equals_true\", \"tests/test_marshalling.py::TestUnmarshaller::test_doesnt_store_errors_when_index_errors_equals_false\", \"tests/test_marshalling.py::TestUnmarshaller::test_deserialize\", \"tests/test_marshalling.py::TestUnmarshaller::test_extra_fields\", \"tests/test_marshalling.py::TestUnmarshaller::test_deserialize_many\", \"tests/test_marshalling.py::TestUnmarshaller::test_deserialize_stores_errors\", \"tests/test_marshalling.py::TestUnmarshaller::test_deserialize_fields_with_attribute_param\", \"tests/test_marshalling.py::TestUnmarshaller::test_deserialize_fields_with_load_from_param\", \"tests/test_marshalling.py::TestUnmarshaller::test_deserialize_fields_with_dump_only_param\", \"tests/test_marshalling.py::TestUnmarshaller::test_deserialize_wrong_type_root_data\", \"tests/test_marshalling.py::TestUnmarshaller::test_deserialize_wrong_type_nested_data\"]",
    "environment_setup_commit": "7015fc4333a2f32cd58c3465296e834acd4496ff"
}